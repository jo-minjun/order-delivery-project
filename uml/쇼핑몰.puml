@startuml

package productapp {

    class Product <<root>> {
        - id: Long
        - name: String
        - price: Money
        - description: String
    }

}

package orderapp {

    class Order <<root>> {
        - id: Long
        - orderLine: OrderLine
        - totalAmount: Money
        - deliveryId: Long
        - paymentId: Long
        - state: OrderState
    }

    class OrderLine <<value>> {
        - lineItems: Set<LineItem>
    }

    class LineItem <<value>> {
        - productId: Long
        - price: Money
        - quantity: Integer
    }

    interface OrderState <<stateMachine>> {
        + paymentApproved(Order): void
        + deliveryStarted(Order): void
        + deliveryCompleted(Order): void
        + orderCanceled(Order): void
    }

    class PaymentApprovedState implements OrderState {}
    class DeliveryStartedState implements OrderState {}
    class DeliveryCompletedState implements OrderState {}
    class CancelledState implements OrderState {}

    Order -> OrderLine
    OrderLine o-> LineItem
    Order -left-> OrderState

}

package deliveryapp {

    class Delivery <<root>> {
        - id: Long
        - address: Address
        - status: DeliveryStatus
    }

    class Address <<value>> {
        - zipCode: String
        - address: String
    }

    enum DeliveryStatus {
        - SUBMITTED
        - STARTERD
        - COMPLETED
    }

    Delivery -> Address
    Delivery -left-> DeliveryStatus

}

package paymentapp {

    class Payment<<root>> {
        - id: Long
        - cardNo: String
        - status: PaymentStatus
        - authorizedNo: String
    }

    enum PaymentStatus {
        - SUBMITTED
        - APPROVED
        - CANCELLED
    }

    Payment -left-> PaymentStatus

}

package common {

    class Money <<value>> {
        - value: BigDecimal
    }

}

orderapp -------> productapp
orderapp -------> deliveryapp
orderapp -------> paymentapp
orderapp -------> common
paymentapp ----> common

@enduml
